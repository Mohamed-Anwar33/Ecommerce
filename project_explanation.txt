# شرح شامل لمشروع التجارة الإلكترونية (Full-Stack E-commerce Project)

هذا المستند يقدم شرحاً تفصيلياً لكل ملف ومجلد في المشروع، مقسماً إلى قسمين: الواجهة الأمامية (Frontend) والواجهة الخلفية (Backend).

---

## الجزء الأول: الواجهة الأمامية (Frontend - Angular)

الواجهة الأمامية هي تطبيق من نوع Single-Page Application (SPA) مبني باستخدام إطار العمل Angular. مسؤولة عن كل ما يراه المستخدم ويتفاعل معه في المتصفح.

### 1. الملفات والمجلدات الرئيسية (Root Directory)

*   `angular.json`: ملف الإعداد الرئيسي لمشروع Angular. يحدد كيفية بناء المشروع، تشغيله، واختباره.
*   `package.json`: يحدد الحزم (dependencies) التي يعتمد عليها المشروع (مثل Angular, RxJS) وأوامر التشغيل (scripts).
*   `package-lock.json`: يضمن تثبيت نفس إصدارات الحزم في كل مرة لمنع المشاكل.
*   `.gitignore`: يحدد الملفات التي يجب على نظام Git تجاهلها (مثل `node_modules`).
*   `tsconfig.json`: ملف إعدادات مترجم TypeScript، يخبره بكيفية تحويل الكود إلى JavaScript.
*   `src`: المجلد الأهم، يحتوي على الكود المصدري للتطبيق.

### 2. مجلد `src` (Source Code)

*   `index.html`: صفحة HTML الرئيسية التي يتم تحميل التطبيق بداخلها.
*   `main.ts`: نقطة الدخول الرئيسية للتطبيق، مسؤولة عن إقلاع (bootstrap) وحدة `AppModule`.
*   `styles.scss`: ملف الأنماط (CSS/SCSS) العام للتطبيق.
*   `assets`: لتخزين الملفات الثابتة مثل الصور والأيقونات.
*   `app`: المجلد الأساسي الذي يحتوي على كل منطق التطبيق.

### 3. مجلد `app` (The Core of the App)

يتبع المشروع بنية منظمة تعتمد على تقسيم المسؤوليات:

*   `app.component.ts/html`: المكون الرئيسي للتطبيق (Root Component) الذي يحتوي على `<router-outlet>` لعرض المكونات الأخرى.
*   `app.routes.ts`: ملف نظام التوجيه (Routing)، يربط كل مسار URL بمكون معين.
*   `core`: للخدمات والحراس التي يتم إنشاؤها مرة واحدة على مستوى التطبيق (Singleton Services).
*   `features`: يحتوي على الميزات الوظيفية للتطبيق (مثل المنتجات، لوحة التحكم) مقسمة إلى وحدات.
*   `shared`: للمكونات والأدوات القابلة لإعادة الاستخدام.

#### 3.1. مجلد `core` (Core Functionality)

*   `api.service.ts`: العقل المدبر للتواصل مع الخادم (Backend). يحتوي على جميع دوال إرسال واستقبال البيانات من الـ API.
*   `auth.service.ts`: خدمة المصادقة للمستخدمين العاديين (تسجيل دخول، إنشاء حساب، تسجيل خروج).
*   `admin-auth.service.ts`: خدمة المصادقة المخصصة للمدير (Admin).
*   `cart.service.ts`: خدمة سلة التسوق، تدير إضافة وحذف وتحديث المنتجات في السلة.
*   `auth.guard.ts`: حارس مسار (Route Guard) يحمي الصفحات التي تتطلب تسجيل الدخول.
*   `admin.guard.ts`: حارس مسار يضمن أن المستخدم الذي يصل لصفحات الإدارة هو "مدير".
*   `notification.service.ts`: خدمة مسؤولة عن عرض الإشعارات للمستخدم (رسائل النجاح والخطأ).
*   `interceptor/auth.interceptor.ts`: معترض (Interceptor) يضيف "توكن المصادقة" تلقائياً إلى كل طلب HTTP يخرج من التطبيق.

#### 3.2. مجلد `features` (Application Features)

مقسم إلى قسمين:

*   **`public` (الصفحات العامة):**
    *   `home.component`: الصفحة الرئيسية للموقع.
    *   `products.component`: صفحة عرض جميع المنتجات مع فلاتر وبحث.
    *   `user-login.component`: صفحة تسجيل دخول المستخدمين.
    *   `sign-up.component`: صفحة إنشاء حساب جديد.
    *   `user-dashboard.component`: لوحة تحكم المستخدم لعرض وتعديل وحذف منتجاته الخاصة.
    *   `add-user-product.component`: صفحة لإضافة منتج جديد من قبل المستخدم.
    *   `cart/cart.component`: صفحة عرض محتويات سلة التسوق.

*   **`admin` (لوحة تحكم المدير):**
    *   `admin-login.component`: صفحة تسجيل دخول المدير.
    *   `admin-dashboard.component`: لوحة التحكم الرئيسية للمدير (عرض كل المنتجات والمستخدمين والإحصائيات).
    *   `add-product.component`: صفحة إضافة منتج جديد بواسطة المدير.
    *   `edit-product/edit-product.component`: صفحة تعديل بيانات منتج موجود.
    *   `chart/chart.component`: مكون لعرض الرسوم البيانية في لوحة التحكم.

---

## الجزء الثاني: الواجهة الخلفية (Backend - Node.js/Express)

الواجهة الخلفية مبنية باستخدام Node.js و Express.js مع قاعدة بيانات MongoDB. هي المسؤولة عن التعامل مع قاعدة البيانات، تنفيذ منطق العمل، وتوفير واجهة برمجة التطبيقات (API).

### 1. الملفات والمجلدات الرئيسية

*   `server.js`: نقطة انطلاق الخادم، يقوم بتشغيل Express والاتصال بقاعدة البيانات.
*   `package.json`: يحدد المكتبات التي يعتمد عليها الخادم (`express`, `mongoose`, `jsonwebtoken`, `bcryptjs`).
*   `.env`: ملف حساس يحتوي على متغيرات البيئة (رابط قاعدة البيانات، المفاتيح السرية).

### 2. البنية المعمارية (Models, Routes, Controllers)

*   **`models` (النماذج):**
    *   `User.js`: يحدد مخطط (Schema) بيانات المستخدم في قاعدة البيانات (الاسم، الإيميل، كلمة المرور المشفرة).
    *   `Product.js`: يحدد مخطط المنتج (الاسم، السعر، الوصف، و `owner` لتحديد مالك المنتج).
    *   `Cart.js`: يحدد مخطط سلة التسوق (معرف المستخدم، قائمة المنتجات والكميات).
    *   `Admin.js`: مخطط منفصل لبيانات المدير.

*   **`routes` (المسارات):**
    *   `auth.js`: يحدد نقاط النهاية (Endpoints) للمصادقة (`/register`, `/login`).
    *   `product.js`: يحدد نقاط النهاية للمنتجات (جلب الكل، جلب واحد، إضافة، تعديل، حذف).
    *   `cart.js`: يحدد نقاط النهاية لسلة التسوق (إضافة، حذف، تحديث).
    *   `admin.js`: يحدد نقاط النهاية الخاصة بالمدير (جلب كل المستخدمين، حذف مستخدم).

*   **`controllers` (المتحكمات - منطق العمل):**
    *   `authController.js`: يحتوي على منطق تسجيل المستخدمين وتشفير كلمات المرور وإنشاء التوكنات (JWT).
    *   `productController.js`: يحتوي على منطق إضافة وحذف وتعديل المنتجات، مع التحقق من صلاحيات المالك.
    *   `cartController.js`: يحتوي على منطق إدارة سلة التسوق، بما في ذلك التحقق من المخزون.
    *   `adminController.js`: يحتوي على منطق الإجراءات الإدارية التي لا يمكن تنفيذها إلا بواسطة مدير.

*   **`middleware` (الوسطاء):**
    *   `authMiddleware.js`: "حارس الأمن" للـ API. يتحقق من وجود وصحة توكن المصادقة قبل السماح للطلب بالوصول إلى الـ Controller.
    *   `multer.js`: وسيط متخصص لمعالجة طلبات رفع الملفات (مثل صور المنتجات).
    *   `errorHandler.js`: معالج مركزي للأخطاء لتنسيق رسائل الخطأ بشكل موحد.

### 3. ملخص رحلة الطلب في الواجهة الخلفية

1.  **الطلب:** الواجهة الأمامية ترسل طلبًا (مثل `DELETE /api/products/:id`) مع توكن في الترويسة.
2.  **التوجيه:** الخادم يوجه الطلب إلى المسار المناسب في `routes`.
3.  **التحقق:** الـ `middleware` يعمل أولاً، يتحقق من التوكن (`authMiddleware`) ويضمن أن المستخدم مسجل دخوله.
4.  **التنفيذ:** الـ `Controller` يعمل، ينفذ منطق العمل (مثل التحقق من أن المستخدم هو مالك المنتج) ويتفاعل مع قاعدة البيانات عبر الـ `Model`.
5.  **الاستجابة:** الـ `Controller` يرسل استجابة (نجاح أو فشل) إلى الواجهة الأمامية.

---
